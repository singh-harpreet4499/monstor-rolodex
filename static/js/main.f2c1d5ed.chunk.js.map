{"version":3,"sources":["components/card.component.jsx","components/card-list.component.jsx","components/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","key","Searchbox","placeholder","handleChange","type","onChange","App","state","searchText","fetch","then","response","json","users","setState","catch","this","filtereMonster","filter","toLowerCase","includes","e","a","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qUAIaA,G,KAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCJbC,EAAW,SAAAR,GAEpB,OADAS,QAAQC,IAAIV,GAEZ,yBAAKC,UAAU,aAEND,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACtB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,SCNpCU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BACAC,KAAK,SACJhB,UAAU,SACVc,YAAaA,EACbG,SAAUF,MC6CAG,E,kDAhDb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,MAAM,CACTT,SAAS,CACP,CACEN,GAAG,EACHC,KAAK,gBAEP,CACED,GAAG,EACHC,KAAK,WAEP,CACED,GAAG,EACHC,KAAK,WAGTe,WAAW,IAjBI,E,gEAqBC,IAAD,OACjBC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC1EF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAAChB,SAASe,OAASE,OAAM,WACnDnB,QAAQC,IAAI,wB,+BAGN,IAAD,SACyBmB,KAAKT,MAA7BT,EADD,EACCA,SAASU,EADV,EACUA,WACXS,EAAiBnB,EAASoB,QAC9B,SAAA3B,GAAO,OAAEA,EAAQE,KAAK0B,cAAcC,SAASZ,EAAWW,kBAE1D,OACG,yBAAO/B,UAAU,OAEf,kBAAC,EAAD,CAAWc,YAAa,SACxBC,aAAY,uCAAE,WAAOkB,GAAP,SAAAC,EAAA,sEACP,EAAKR,SAAS,CAACN,WAAWa,EAAEE,OAAOC,QAD5B,2CAAF,wDAKZ,kBAAC,EAAD,CAAUhB,WAAYA,EAAaV,SAAUmB,S,GA1CpCQ,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.f2c1d5ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from \"./card.component\";\r\n\r\nexport const CardList = props => {\r\n    console.log(props);\r\n    return (\r\n    <div className='card-list'>\r\n          {\r\n             props.monsters.map(monster=>(\r\n                 <Card key={monster.id} monster={monster} />\r\n             ))\r\n          }\r\n    </div>\r\n    )\r\n};","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const Searchbox = ({placeholder,handleChange}) =>(\r\n    <input \r\n    type='search'\r\n     className='search' \r\n     placeholder={placeholder} \r\n     onChange={handleChange}\r\n     />\r\n)","import React from 'react';\n// import logo from './logo.svg';\nimport {CardList} from './components/card-list.component'\nimport './App.css';\nimport { Searchbox } from './components/search-box.component';\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      monsters:[\n        {\n          id:1,\n          name:'Frankenstein'\n        },\n        {\n          id:2,\n          name:'Dracula'\n        },\n        {\n          id:3,\n          name:'Zombie'\n        }\n      ],\n      searchText:''\n    }\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()\n    ).then(users=>this.setState({monsters:users})).catch(()=>{\n      console.log('did not connect');\n    })\n  }\n  render() {\n    const { monsters,searchText } = this.state;\n    const filtereMonster = monsters.filter(\n      monster=>monster.name.toLowerCase().includes(searchText.toLowerCase())\n    )\n    return (\n       <div   className='App' >\n \n         <Searchbox placeholder={'Search'}\n         handleChange={async (e)=>{\n          await this.setState({searchText:e.target.value})\n          // console.log(this.state.searchText);\n        }}\n         />\n         <CardList searchText={searchText}  monsters={filtereMonster}>\n           </CardList>\n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}